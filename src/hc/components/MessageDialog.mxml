<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		width="340" height="160" xmlns:ns="http://flex.hc.org"
		keyDown="titlewindow1_keyDownHandler(event)">
	
	<fx:Metadata>		
		[Event(name="close", type="flash.events.Event")]
		[Style(name="MessageDialogImgQuestion", inherit="no", type="Class")]
		[Style(name="MessageDialogImgWarning", inherit="no", type="Class")]
		[Style(name="MessageDialogImgInfo", inherit="no", type="Class")]
		[Style(name="MessageDialogImgOk", inherit="no", type="Class")]
		[Style(name="MessageDialogImgError", inherit="no", type="Class")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import hc.components.actionButton.AccessoryButton;
			import hc.components.actionButton.PrimaryButton;
			import hc.components.actionButton.WarningButton;
			import hc.util.Util;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.managers.PopUpManager;
			
			//----------------------------------------
			//				图标Flag
			//----------------------------------------
			public static const FLAG_INFO:int =0;
			public static const FLAG_CORRECT:int=1;
			public static const FLAG_WARNING:int =2;
			public static const FLAG_ERROR:int=3;
			public static const FLAG_QUESTION:int=4;
			
			//设置图标样式
			private function setMessageStyle(msgFlag:int):void{
				//设置图标
				switch(msgFlag)
				{
					case MessageDialog.FLAG_WARNING:
						iconDisplay.source = getStyle('MessageDialogImgWarning');
						break;
					case MessageDialog.FLAG_CORRECT:
						iconDisplay.source = getStyle('MessageDialogImgOk');
						break;
					case MessageDialog.FLAG_QUESTION:
						iconDisplay.source =getStyle('MessageDialogImgQuestion');
						break;
					case MessageDialog.FLAG_ERROR:
						iconDisplay.source = getStyle('MessageDialogImgError');
						break;
					default:
						iconDisplay.source = getStyle('MessageDialogImgInfo');				
				}
			}
			
			
			//----------------------------------------
			//			创建按钮
			//----------------------------------------			
			public static const BUTTONS_CONFIRMCANCEL:int =0;			//仅‘确定’、‘取消’
			public static const BUTTONS_CONFIRMONLY:int =1;			//仅‘确定’
			
			private static const RESULT_CONFIRM:String = "confirm";
			private static const RESULT_CANCEL:String ="cancel";
			
			private function createButton(label:String, name:String, type:int, defButton:Boolean = false):Button
			{
				var button:Button;
				//操作按钮
				if(type==1){
					button = new PrimaryButton();		
				}
				//警告按钮
				else if(type==2){
					button = new WarningButton();
				}
				//附加按钮
				else{
					button= new AccessoryButton();					
				}
				button.label = label;
				button.name = name;				
				
				button.addEventListener(MouseEvent.CLICK, clickHandler);
				//添加到界面
				buttons.addElement(button);
				
				if(defButton){
					button.setFocus();
				}
				
				return button;
			}
			
			override protected function closeButton_clickHandler(event:MouseEvent):void
			{
				super.closeButton_clickHandler(event);
				removeDialog(RESULT_CANCEL);
			}
			
			
			//----------------------------------------
			//				关闭事件
			//----------------------------------------
			
			private var _closeHandler:Function;
			//窗口关闭
			private  function removeDialog(buttonName:String):void{				
				if(_closeHandler != null){		
					_closeHandler(buttonName);					
				}
				PopUpManager.removePopUp(this);
				
				//移出焦点，防止回车键重复打开确认窗口
				if(buttonName=="confirm"){
					Util.removeFocus();
				}
			}
			//点击事件
			private function clickHandler(event:MouseEvent):void{
				var name:String = (event.currentTarget as Button).name;
				removeDialog(name);
			}			
			
			/**
			 * 警告
			 * @param message 		消息内容
			*/
			public static function warning(message:String):MessageDialog{
				return showDialog("警告",message,MessageDialog.FLAG_WARNING,MessageDialog.BUTTONS_CONFIRMONLY,null);
			}
			
			/**
			 * 成功
			 * @param message 	消息内容
			 */
			public static function success(message:String):MessageDialog{
				return showDialog("成功",message,MessageDialog.FLAG_CORRECT,MessageDialog.BUTTONS_CONFIRMONLY,null);
			}
			
			/**
			 * 错误
			 * @param message  消息内容
			 */
			public static function error(message:String):MessageDialog{
				return showDialog("错误",message,MessageDialog.FLAG_ERROR,MessageDialog.BUTTONS_CONFIRMONLY,null);
			}
			
			/**
			 * 信息
			 * @param message  消息内容
			 */
			public static function info(message:String):MessageDialog{
				return showDialog("信息",message,MessageDialog.FLAG_INFO,MessageDialog.BUTTONS_CONFIRMONLY,null);
			}
			
			/**
			 * 确认
			 * @param message  消息内容
			 */
			public static function confirm(message:String,yesHandle:Function=null,cancelHandle:Function=null):MessageDialog{
				return showDialog("请确认",message,MessageDialog.FLAG_QUESTION,MessageDialog.BUTTONS_CONFIRMCANCEL,function(s:String):void{
					if(s=="confirm"){
						yesHandle();
					}
					else if(cancelHandle!=null){
						cancelHandle();
					}
				});
			}
			
			/**
			 * 确认删除
			 * @param yesHandle  回调函数
			 */
			public static function confirmDelete(yesHandle:Function=null):MessageDialog{
				return showDialog("确认删除","确定要删除选中的数据吗？",MessageDialog.FLAG_QUESTION,MessageDialog.BUTTONS_CONFIRMCANCEL,function(s:String):void{
					if(s=="confirm"){
						yesHandle();
					}
				});
			}
			
			/**
			 * 确认删除
			 * @param message 消息内容
			 * @param yesHandle  回调函数
			 */
			public static function confirmDelete1(message:String,yesHandle:Function=null):MessageDialog{
				return showDialog("确认删除",message,MessageDialog.FLAG_QUESTION,MessageDialog.BUTTONS_CONFIRMCANCEL,function(s:String):void{
					if(s=="confirm"){
						yesHandle();
					}
				});
			}
			
			/**
			 * 确认删除
			 * @param title 对话框标题
			 * @param message 消息内容
			 * @param yesHandle  回调函数
			 */
			public static function confirmDelete2(title:String, message:String,yesHandle:Function=null):MessageDialog{
				return showDialog(title,message,MessageDialog.FLAG_QUESTION,MessageDialog.BUTTONS_CONFIRMCANCEL,function(s:String):void{
					if(s=="confirm"){
						yesHandle();
					}
				});
			}
			
			
			/**
			 * 显示选择对话框. 
			 * @param title 		对话框标题
			 * @param message 		消息内容
			 * @param msgFlag		消息类型：信息、警告、错误等
			 * @param buttons		显示的按钮
			 * @param closeHandler	窗口关闭的回调函数
			 */
			public static function showDialog(title:String, message:String,msgFlag:int= MessageDialog.FLAG_WARNING,
					buttons:int = MessageDialog.BUTTONS_CONFIRMONLY,closeHandler:Function=null):MessageDialog{
				var messageDialog:MessageDialog =  new MessageDialog();
				PopUpManager.addPopUp(messageDialog, Sprite(FlexGlobals.topLevelApplication), true);
				PopUpManager.centerPopUp(messageDialog);
				messageDialog.setFocus();
				
				messageDialog.title = title;
				messageDialog.lblContent.text = message;
				messageDialog.setMessageStyle(msgFlag);
				messageDialog._closeHandler = closeHandler;
				
				//创建按钮
				if(buttons==BUTTONS_CONFIRMCANCEL){
					messageDialog.createButton('确定',RESULT_CONFIRM,1,true);
					messageDialog.createButton('取消',RESULT_CANCEL,3,false);
				}
				else if(buttons==BUTTONS_CONFIRMONLY){
					messageDialog.createButton('确定',RESULT_CONFIRM,1,true);
				}
				
				return messageDialog;
			}
			
			/**
			 * 显示选择对话框 
			 * @param message 消息内容
			 * @param closeHandler	窗口关闭的回调函数
			 * @param msgFlag		消息类型：信息、警告、错误等
			 * @param buttons 要显示的按钮
			 * new ArrayCollection([
			 {label:"按钮1",name:"btn1",type:1}
			 ,{label:"按钮2",name:"btn3",type:2}
			 ,{label:"按钮2",name:"btn2",type:3}
			 ])
			 */
			public static function showDialogEx(title:String, message:String,buttons:Array,msgFlag:int= MessageDialog.FLAG_WARNING,
															   closeHandler:Function=null):MessageDialog{
				var messageDialog:MessageDialog = new MessageDialog();
				PopUpManager.addPopUp(messageDialog, Sprite(FlexGlobals.topLevelApplication), true);
				PopUpManager.centerPopUp(messageDialog);
				messageDialog.setFocus();
				
				messageDialog.title = title;
				messageDialog.lblContent.text = message;
				messageDialog.setMessageStyle(msgFlag);
				messageDialog._closeHandler = closeHandler;
				
				for(var i:int=0;i<buttons.length; i++){
					messageDialog.createButton(buttons[i].label,buttons[i].name,buttons[i].type,false);
				}
				
				return messageDialog;
			}
			
			protected function titlewindow1_keyDownHandler(event:KeyboardEvent):void
			{
				if(event.keyCode == Keyboard.ESCAPE){
					removeDialog(RESULT_CANCEL);
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry id="rectFill1" alpha="1.0" color="#ffffff" ratio="0.5"/>
					<s:GradientEntry id="rectFill2" alpha="1.0" color="#e6e6ff" ratio="1"/>
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
		
		<s:BitmapImage  id="iconDisplay" smooth="true" x="5" verticalCenter="-20"/>
		
		<s:Label id="lblContent" width="100%" x="45"  
							 verticalCenter="-20" verticalAlign="middle" textAlign="start" fontSize="14" fontFamily="宋体"/>
		
		<s:HGroup id="buttons" width="100%" bottom="5" horizontalAlign="center"/>
</s:TitleWindow>
